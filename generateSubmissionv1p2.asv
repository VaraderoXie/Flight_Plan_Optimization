%% generateSubmissionv1p2 script
% Jovan Trujillo
% Just learned that the latest Matlab also can generate distances and
% waypoints using the 'wgs84' ellipsoid formula.
%
%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Public\Documents\devel\Python_code\Flight_Plan_Agent\testFlightsRev3.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2013/09/06 01:26:11

%% Initialize variables.
%FilePath = 'C:\Users\Public\Documents\devel\Python_code\Flight_Plan_Agent\';
FilePath = 'C:\Documents and Settings\jtrujil1\My Documents\General Programming\Flight_Plan_Modeling\';
% testFlightFilePath = strcat(FilePath,'testFlightsRev3.csv');
testFlightFilePath = strcat(FilePath,'test_20130704_1540_sample.csv');
submissionFilePath = strcat(FilePath,'FlightQuestSimulator-Rev3\OneDaySimulatorFiles\submission8.csv');
%submissionFilePath = strcat(FilePath,'mysubmission.csv');
airportsFilePath = strcat(FilePath, 'airports.csv');
delimiter = ',';
startRow = 2;
stepCount = 50;
E = referenceEllipsoid('wgs84','km');
%E = referenceEllipsoid('unitsphere');
%% Format string for each line of text:
%   column1: double (%f)
%	column2: text (%s)
%   column3: text (%s)
%	column4: text (%s)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%s%s%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
testFlightID = fopen(testFlightFilePath,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(testFlightID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(testFlightID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
FlightHistoryId = dataArray{:, 1};
CutoffTime = dataArray{:, 2};
ArrivalAirport = dataArray{:, 3};
ScheduledArrivalTime = dataArray{:, 4};
CurrentLatitude = dataArray{:, 5};
CurrentLongitude = dataArray{:, 6};
CurrentAltitude = dataArray{:, 7};
CurrentGroundSpeed = dataArray{:, 8};
StandardPassengerCount = dataArray{:, 9};
PremiumPassengerCount = dataArray{:, 10};
FuelRemainingPounds = dataArray{:, 11};
FuelCost = dataArray{:, 12};
CrewDelayCost = dataArray{:, 13};
OtherHourlyCosts = dataArray{:, 14};
NonarrivalPenalty = dataArray{:, 15};
DelayCostProportion30m = dataArray{:, 16};
DelayCostProportion2h = dataArray{:, 17};
MaxStandardDelayCost = dataArray{:, 18};
MaxPremiumDelayCost = dataArray{:, 19};

%% Now open the airport code dataset
%% Format string for each line of text:
%   column1: text (%s)
%	column2: double (%f)
%   column3: double (%f)
formatSpec = '%s%f%f%[^\n\r]';
testFlightID = fopen(airportsFilePath,'r');
dataArray = textscan(testFlightID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false);
fclose(testFlightID);

%% Allocate imported array to column variable names
airport_icao_code = dataArray(:,1);
arrival_latitude_degrees = dataArray(:,2);
arrival_longitude_degrees = dataArray(:,3);	
altitude_feet = dataArray(:,4);

%% Calculate Flight Path and save to submission file
% Sample submission file contains:
% FlightId, Ordinal, LatitudeDegrees, LongitudeDegrees, AltitudeFeet, AirspeedKnots
% formatSpec = '%d%d%f%f%f%f%[^\n\r]';
kmToMile = unitsratio('mile','km');
feetToMeters = unitsratio('meter','feet');
testFlightID = fopen(submissionFilePath, 'w');
fprintf(testFlightID,'FlightId,Ordinal,LatitudeDegrees,LongitudeDegrees,AltitudeFeet,AirspeedKnots\n');
totalFlights = length(FlightHistoryId);
%totalFuelBurn = zeros(totalFlights);
%flightTime = zeros(totalFlights);
old_length = 0;
for i = 1:1:totalFlights
    landingCode = ArrivalAirport(i);
    AltitudeFeet = CurrentAltitude(i);
    AirspeedKnots = CurrentGroundSpeed(i);
    if (AirspeedKnots == 0) 
        AirspeedKnots = 500;
    end
    for j = 1:1:length(airport_icao_code{1,1})
        if (strcmp(airport_icao_code{1,1}(j), landingCode) ~= 0)
            FinalLatitude = arrival_latitude_degrees{1,1}(j);
            FinalLongitude = arrival_longitude_degrees{1,1}(j);
            % FinalAltitudeFeet = altitude_feet{1,1}(j);
            FinalAltitudeFeet = 17000;
        end
    end
    
    %[totalDistanceMeters,a12,~] = vdist(CurrentLatitude(i),CurrentLongitude(i),FinalLatitude,FinalLongitude);
    [totalDistanceKm, a12] = distance(CurrentLatitude(i), CurrentLongitude(i), FinalLatitude, FinalLongitude, E, 'degrees');

%    [totalFuelBurn(i), flightTime(i)] = runFullFlight(AltitudeFeet*feetToMeters,AltitudeFeet*feetToMeters,totalDistanceKm*1000,150);
    % If destination is less than 70 miles away then shrink step size to 1
    % mile.
    if totalDistanceKm < 100
        %[CurrentLatitude(i),CurrentLongitude(i), ~] = vreckon(CurrentLatitude(i), CurrentLongitude(i), 5280*100*feetToMeters,a12);
        %stepsFeet = 5280;
        % stepsMeters = 5280/kmToMile;
        
        fprintf(testFlightID, '%d,%d,%f,%f,%f,%f\n',FlightHistoryId(i), 1, CurrentLatitude(i), CurrentLongitude(i),AltitudeFeet,AirspeedKnots);
        [midLatitude, midLongitude] = reckon(CurrentLatitude(i),CurrentLongitude(i),25/kmToMile,a12,E,'degrees');
        fprintf(testFlightID, '%d,%d,%f,%f,%f,%f\n',FlightHistoryId(i),2,midLatitude,midLongitude,2000,0);
        fprintf(testFlightID, '%d,%d,%f,%f,%f,%f\n',FlightHistoryId(i), 3, FinalLatitude, FinalLongitude,FinalAltitudeFeet, AirspeedKnots);
        
    else
        stepsFeet = 5280*100;
        % stepsMeters = (5280*70)/kmToMile;
        %stepsFeet = (totalDistanceKm*kmToMile*5280)/stepCount;
        %stepsFeet = 5280;
        %stepsMeters = totalDistanceMeters/stepCount;
        %stepsKm = (5280*100*feetToMeters)/1000;
        %stepCount = round(totalDistanceKm / stepsKm);
        
        [lats,lons] = generate_great_circle_path(CurrentLatitude(i), CurrentLongitude(i), FinalLatitude, FinalLongitude, stepsFeet);
        if (length(lats) > old_length) 
            old_length = length(lats);
        end
        %[lats,lons] = vcourse(CurrentLatitude(i),CurrentLongitude(i),FinalLatitude,FinalLongitude,stepsMeters);
        %[lats,lons] = track2(CurrentLatitude(i), CurrentLongitude(i), FinalLatitude, FinalLongitude, E, 'degrees',stepCount);
        for j = 1:1:length(lats)
            [segment,~] = distance(
            if (j < length(lats))
                fprintf(testFlightID,'%d,%d,%f,%f,%f,%f\n', FlightHistoryId(i), j, lats(j), lons(j), AltitudeFeet, AirspeedKnots);
            else
                % fprintf(testFlightID,'%d,%d,%f,%f,%f,%f\n',FlightHistoryId(i),j,lats(j),lons(j),str2double(FinalAltitudeFeet{1,1}),AirspeedKnots);
                  fprintf(testFlightID,'%d,%d,%f,%f,%f,%f\n', FlightHistoryId(i), j, lats(j), lons(j), FinalAltitudeFeet, AirspeedKnots);
            end
        end
    end
    
end
fclose(testFlightID);
%% Clear temporary variables
clearvars testFlightFilePath submissionFilePath airportsFilePath delimiter startRow formatSpec testFlightID dataArray ans;

    
% Notes
% Problem flights using generate_great_circle_path with stepCount = 35 are:
% 301817127
% 301842524
% 301824259
% 301799331
% 301786098
% 301792109
% 301786251
% 301833472
% 301819188
% 301838129
%
% Problem flights using generate_great_circle_path with stepsFeet a
% constant 5280*100 feet are:
% 301823535
% 301785086
%
% Problems flights using vcourse with stepCount = 35 are the same as above.
%

% Short flights were fixed by moving the plane outside of their landing
% approach. Need to understand why the simulator needs this to happen.

% [fuelburn, planeWeight, fuelWeight, machCruise,SpeedOfSound,liftCoef,planeDrag,horizClimbDist,Tmax,Vmean1] = planeClimb(planeNumber, descentTime, climbAltitude)
% [fuelburn, planeWeight, fuelWeight, cruiseTime, horizCruiseDist] = planeCruise(planeNumber, cruiseAltitude, deltaAltitude, liftCoef, totalDistance, SpeedOfSound, machCruise, descentTime, fuelweightCL, horizClimbDist,Vmean1,planeDrag)    
% [fuelburn, TIME] = planeLand(planeNumber,descentTime,planeWeight,fuelWeight, fuelburnCL, fuelburnCR, Timedescent,Tmax)
 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    