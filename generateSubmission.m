%% generateSubmission script
% Jovan Trujillo
%
%
%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Public\Documents\devel\Python_code\Flight_Plan_Agent\testFlightsRev3.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2013/09/06 01:26:11

%% Initialize variables.
FilePath = 'C:\Users\Public\Documents\devel\Python_code\Flight_Plan_Agent\';
testFlightFilePath = strcat(FilePath,'testFlightsRev3.csv');
submissionFilePath = strcat(FilePath,'jovanSubmission.csv');
airportsFilePath = strcat(FilePath, 'airports.csv');
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: text (%s)
%   column3: text (%s)
%	column4: text (%s)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%s%s%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
testFlightID = fopen(testFlightFilePath,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(testFlightID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(testFlightID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
FlightHistoryId = dataArray{:, 1};
CutoffTime = dataArray{:, 2};
ArrivalAirport = dataArray{:, 3};
ScheduledArrivalTime = dataArray{:, 4};
CurrentLatitude = dataArray{:, 5};
CurrentLongitude = dataArray{:, 6};
CurrentAltitude = dataArray{:, 7};
CurrentGroundSpeed = dataArray{:, 8};
StandardPassengerCount = dataArray{:, 9};
PremiumPassengerCount = dataArray{:, 10};
FuelRemainingPounds = dataArray{:, 11};
FuelCost = dataArray{:, 12};
CrewDelayCost = dataArray{:, 13};
OtherHourlyCosts = dataArray{:, 14};
NonarrivalPenalty = dataArray{:, 15};
DelayCostProportion30m = dataArray{:, 16};
DelayCostProportion2h = dataArray{:, 17};
MaxStandardDelayCost = dataArray{:, 18};
MaxPremiumDelayCost = dataArray{:, 19};

%% Clear temporary variables
clearvars testFlightFilePath delimiter startRow formatSpec testFlightID dataArray ans;

%% Now open the airport code dataset
%% Format string for each line of text:
%   column1: text (%s)
%	column2: double (%f)
%   column3: double (%f)
formatSpec = '%s%f%f%[^\n\r]';
testFlightID = fopen(airportsFilePath,'r');
dataArray = textscan(testFlightID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false);
close(testFlightID);
%% Allocate imported array to column variable names
airport_icao_code = dataArray(:,1);
arrival_latitude_degrees = dataArray(:,2);
arrival_longitude_degrees = dataArray(:,3);	
altitude_feet = dataArray(:,4);

totalFlights = length(FlightHistoryId);

for i = 1:1:totalFlights
    landingCode = ArrivalAirport(i);
    
    [lats,lons] = generate_circle_path(CurrentLatitude(i), CurrentLongitude(i),FinalLatitude, FinalLongitude,100);
    
    
    
    
    
    
    
    
    
end
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    